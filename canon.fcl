/*
	Example: A tip calculation FIS (fuzzy inference system)
	Calculates tip based on 'service' and 'food'

									Pablo Cingolani 
*/

FUNCTION_BLOCK cannonBall	// Block definition (there may be more than one block per file)

// Define input variables
VAR_INPUT				
    xr : REAL;
    yr : REAL;
    inputAngle : REAL;
END_VAR

// Define output variable
VAR_OUTPUT				
	angle : REAL;
    strenght : REAL;
END_VAR


FUZZIFY xr
	TERM demaisDepois := (-100, 1) (-50, 1) (-25, 0);
	TERM muitoDepois := (-40, 0) (-25, 1) (-10, 0);
	TERM depois := (-20, 0) (-10, 1) (0, 0);
    TERM antes := (0, 0) (10, 1) (20, 0);
    TERM muitoAntes := (10, 0) (25, 1) (40, 0);
    TERM demaisAntes := (25, 0) (50, 1) (100, 1);
END_FUZZIFY

FUZZIFY yr
	TERM bbb := (20, 0) (50, 1) (100, 1);
	TERM bb := (5, 0) (20, 1) (35, 0);
	TERM b := (0, 0) (5, 1) (10, 0);
    TERM a := (-10, 0) (-5, 1) (0, 0);
    TERM aa := (-35, 0) (-20, 1) (-5, 0);
    TERM aaa :=  (-100, 1) (-50, 1) (-20, 0); 			
END_FUZZIFY

FUZZIFY inputAngle
	TERM muitoAlto := (60, 0) (75, 1) (89, 1);
	TERM alto := (45, 0) (60, 1) (75, 0);
	TERM baixo := (15, 0) (30, 1) (45, 0);
	TERM muitoBaixo := (1, 1) (15, 1) (30, 0);
END_FUZZIFY

// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
DEFUZZIFY angle
	TERM ddd := (-29, 0) (-19, 1) (-9, 0);
	TERM dd := (-17, 0) (-9, 1) (-0.8, 0);
	TERM d := (-1.6, 0) (-0.8, 1) (0, 0);	
	TERM s := (0, 0) (0.8 , 1) (1.6, 0);
	TERM ss := (0.8, 0) (9, 1) (17, 0);
	TERM sss := (9, 0) (19, 1) (29, 0);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY strenght	
	TERM ppp := (-16, 1) (-12, 1) (-6, 1) (-4, 0);
    TERM pp := (-5, 0) (-3, 1) (-1, 0);
    TERM p := (-2, 0) (-1, 1) (0, 0);
	TERM f := (0, 0) (1, 1) (2 ,0);
	TERM ff := (1, 0) (3, 1) (5, 0);
    TERM fff := (4, 0) (6, 1) (12, 1) (16, 1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

// Inference rules
RULEBLOCK No1
	AND : MIN;	// Use 'min' for 'and'
	ACT : MIN;	// Use 'min' activation method
	ACCU : MAX;	// Use 'max' accumulation method
	
	// Regras básicas de aproximação do alvo
		// Antes
	RULE 00  : IF xr IS antes THEN strenght IS ff;
	RULE 01  : IF xr IS muitoAntes THEN strenght IS ff;
	RULE 02  : IF xr IS demaisAntes THEN strenght IS fff;
		// Depois
//	RULE 03 : IF xr IS demaisDepois THEN strenght IS ppp;
//	RULE 04 : IF xr IS muitoDepois THEN strenght IS pp;

	// Regras pra se aproximar do alvo mais rapidamente, isto é, mudar ângulo p/ 45.
	RULE 31  : IF xr IS muitoAntes AND inputAngle IS muitoAlto THEN angle IS ddd;
	RULE 32  : IF xr IS muitoAntes AND inputAngle IS alto THEN angle IS d;
	RULE 33  : IF xr IS muitoAntes AND inputAngle IS baixo THEN angle IS s; 
	RULE 34  : IF xr IS muitoAntes AND inputAngle IS muitoBaixo THEN angle IS ss;
	
	RULE 37  : IF xr IS demaisAntes AND inputAngle IS muitoAlto THEN angle IS ddd;
	RULE 38  : IF xr IS demaisAntes AND inputAngle IS muitoBaixo THEN angle IS sss;
	RULE 39  : IF xr IS demaisAntes AND inputAngle IS alto THEN angle IS dd;
	RULE 310 : IF xr IS demaisAntes AND inputAngle IS baixo THEN angle IS ss;
	
	// Regras p/ ajute da força após ultrapassar Xa
		// Projétil Baixo
	RULE 10 : IF xr IS depois AND yr IS b THEN strenght IS f;
	RULE 11 : IF xr IS depois AND yr IS bb THEN strenght IS ff;
	RULE 12 : IF xr IS depois AND yr IS bbb THEN strenght IS fff;
		// Projétil Alto
	RULE 13 : IF xr IS depois AND yr IS a THEN strenght IS p;
	RULE 14 : IF xr IS depois AND yr IS aa THEN strenght IS pp;
	RULE 15 : IF xr IS depois AND yr IS aaa THEN strenght IS ppp;	
	
	// Regras p/ ajutes do ângulo após ultrapassar Xa
	RULE 20 : IF yr IS a   THEN angle IS d;
	RULE 21 : IF yr IS aa  THEN angle IS dd;
	RULE 22 : IF yr IS aaa THEN angle IS ddd;
	RULE 23 : IF yr IS b   THEN angle IS s;
	RULE 24 : IF yr IS bb  THEN angle IS ss;
	RULE 25 : IF yr IS bbb THEN angle IS sss;
	/*
		// Depois
	RULE 20 : IF yr IS a   AND xr IS depois THEN angle IS d;
	RULE 21 : IF yr IS aa  AND xr IS depois THEN angle IS dd;
	RULE 22 : IF yr IS aaa AND xr IS depois THEN angle IS ddd;
	RULE 23 : IF yr IS b   AND xr IS depois THEN angle IS s;
	RULE 24 : IF yr IS bb  AND xr IS depois THEN angle IS ss;
	RULE 25 : IF yr IS bbb AND xr IS depois THEN angle IS sss;
		// muitoDepois	
	RULE 20 : IF yr IS a   AND xr IS depois THEN angle IS d;
	RULE 21 : IF yr IS aa  AND xr IS depois THEN angle IS dd;
	RULE 22 : IF yr IS aaa AND xr IS depois THEN angle IS ddd;
	RULE 23 : IF yr IS b   AND xr IS depois THEN angle IS s;
	RULE 24 : IF yr IS bb  AND xr IS depois THEN angle IS ss;
	RULE 25 : IF yr IS bbb AND xr IS depois THEN angle IS sss;
	* 
	*/
	
	
	
	/*
	RULE 10 : IF yr IS a   AND xr IS muitoDepois THEN angle IS d;
	RULE 11 : IF yr IS aa  AND xr IS muitoDepois THEN angle IS d;
	RULE 12 : IF yr IS aaa AND xr IS muitoDepois THEN angle IS d;
	RULE 13 : IF yr IS b   AND xr IS muitoDepois THEN angle IS s;
	RULE 14 : IF yr IS bb  AND xr IS muitoDepois THEN angle IS s;
	RULE 15 : IF yr IS bbb AND xr IS muitoDepois THEN angle IS s;
	* 
	*/

	
END_RULEBLOCK

END_FUNCTION_BLOCK
