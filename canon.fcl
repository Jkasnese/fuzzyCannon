/*
	Example: A tip calculation FIS (fuzzy inference system)
	Calculates tip based on 'service' and 'food'

									Pablo Cingolani 
*/

FUNCTION_BLOCK cannonBall	// Block definition (there may be more than one block per file)

// Define input variables
VAR_INPUT				
    xr : REAL;
    yr : REAL;
    inputAngle : REAL;
END_VAR

// Define output variable
VAR_OUTPUT				
	angle : REAL;
    strenght : REAL;
END_VAR


FUZZIFY xr
	TERM demaisDepois := (-100, 1) (-50, 1) (-25, 0);
	TERM muitoDepois := (-40, 0) (-25, 1) (-10, 0);
	TERM depois := (-20, 0) (-10, 1) (0, 0);
    TERM antes := (0, 0) (10, 1) (20, 0);
    TERM muitoAntes := (10, 0) (25, 1) (40, 0);
    TERM demaisAntes := (25, 0) (50, 1) (100, 1);
END_FUZZIFY

FUZZIFY yr
	TERM bbb := (20, 0) (50, 1) (100, 1);
	TERM bb := (5, 0) (20, 1) (35, 0);
	TERM b := (0, 0) (5, 1) (10, 0);
    TERM a := (-10, 0) (-5, 1) (0, 0);
    TERM aa := (-35, 0) (-20, 1) (-5, 0);
    TERM aaa :=  (-100, 1) (-50, 1) (-20, 0); 			
END_FUZZIFY

FUZZIFY inputAngle
	TERM muitoAlto := (60, 0) (75, 1) (89, 1);
	TERM alto := (45, 0) (60, 1) (75, 0);
	TERM baixo := (15, 0) (30, 1) (45, 0);
	TERM muitoBaixo := (1, 1) (15, 1) (30, 0);
END_FUZZIFY

// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
DEFUZZIFY angle
	TERM ddd := (-15, 0) (-9, 1) (-3, 0);
	TERM dd := (-5, 0) (-3, 1) (-1, 0);
	TERM d := (-2, 0) (-1, 1) (0, 0);	
	TERM s := (0, 0) (1 , 1) (2, 0);
	TERM ss := (1, 0) (3, 1) (5, 0);
	TERM sss := (3, 0) (9, 1) (15, 0);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY strenght	
	TERM ppp := (-10, 1) (-8, 1) (-6, 1) (-4, 0);
    TERM pp := (-5, 0) (-3, 1) (-1, 0);
    TERM p := (-2, 0) (-1, 1) (0, 0);
	TERM f := (0, 0) (1, 1) (2 ,0);
	TERM ff := (1, 0) (3, 1) (5, 0);
    TERM fff := (4, 0) (6, 1) (8, 1) (10, 1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

// Inference rules
RULEBLOCK No1
	AND : MIN;	// Use 'min' for 'and'
	ACT : MIN;	// Use 'min' activation method
	ACCU : MAX;	// Use 'max' accumulation method
	
	RULE -3 : IF xr IS demaisDepois THEN strenght IS ppp;
	RULE -2 : IF xr IS muitoDepois THEN strenght IS pp;
	RULE -1 : IF xr IS depois THEN strenght IS p;
	RULE 0  : IF xr IS antes THEN strenght IS f;
	RULE 5  : IF xr IS muitoAntes THEN strenght IS ff;
	RULE 6  : IF xr IS demaisAntes THEN strenght IS fff;

	RULE 00 : IF yr IS a   AND xr IS depois THEN angle IS d;
	RULE 01 : IF yr IS aa  AND xr IS depois THEN angle IS dd;
	RULE 02 : IF yr IS aaa AND xr IS depois THEN angle IS ddd;
	RULE 03 : IF yr IS b   AND xr IS depois THEN angle IS s;
	RULE 04 : IF yr IS bb  AND xr IS depois THEN angle IS ss;
	RULE 05 : IF yr IS bbb AND xr IS depois THEN angle IS sss;
	
	RULE 10 : IF yr IS a   AND xr IS muitoDepois THEN angle IS d;
	RULE 11 : IF yr IS aa  AND xr IS muitoDepois THEN angle IS d;
	RULE 12 : IF yr IS aaa AND xr IS muitoDepois THEN angle IS d;
	RULE 13 : IF yr IS b   AND xr IS muitoDepois THEN angle IS s;
	RULE 14 : IF yr IS bb  AND xr IS muitoDepois THEN angle IS s;
	RULE 15 : IF yr IS bbb AND xr IS muitoDepois THEN angle IS s;
	
	/*
	RULE 1  : IF xr IS muitoAntes AND inputAngle IS muitoAlto THEN angle IS dd;
	RULE 2  : IF xr IS muitoAntes AND inputAngle IS alto THEN angle IS d;
	RULE 3  : IF xr IS muitoAntes AND inputAngle IS baixo THEN angle IS s; 
	RULE 4  : IF xr IS muitoAntes AND inputAngle IS muitoBaixo THEN angle IS ss;
	
	RULE 7  : IF xr IS demaisAntes AND inputAngle IS muitoAlto THEN angle IS ddd;
	RULE 8  : IF xr IS demaisAntes AND inputAngle IS muitoBaixo THEN angle IS sss;
	RULE 9  : IF xr IS demaisAntes AND inputAngle IS alto THEN angle IS dd;
	RULE 10 : IF xr IS demaisAntes AND inputAngle IS baixo THEN angle IS ss;
*/
	
END_RULEBLOCK

END_FUNCTION_BLOCK
